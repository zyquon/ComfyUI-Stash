# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class Img(BaseModel):
    id: str
    urls: List[str]
    title: Optional[str]
    paths: "ImgPaths"
    visual_files: List[
        Annotated[
            Union["ImgVisualFilesVideoFile", "ImgVisualFilesImageFile"],
            Field(discriminator="typename__"),
        ]
    ]


class ImgPaths(BaseModel):
    image: Optional[str]
    thumbnail: Optional[str]
    preview: Optional[str]


class ImgVisualFilesVideoFile(BaseModel):
    typename__: Literal["VideoFile"] = Field(alias="__typename")


class ImgVisualFilesImageFile(BaseModel):
    typename__: Literal["ImageFile"] = Field(alias="__typename")
    id: str
    path: str
    size: Any
    width: int
    height: int
    fingerprints: List["ImgVisualFilesImageFileFingerprints"]


class ImgVisualFilesImageFileFingerprints(BaseModel):
    type: str
    value: str


Img.model_rebuild()
